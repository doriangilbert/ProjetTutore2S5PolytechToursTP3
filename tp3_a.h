/**
 * \file tp3_a.h
 * \brief Header pour analyseur syntaxique LR pour le langage JSON
 * \author GILBERT Dorian et DHONDT Matheo
 * \version 0.1
 * \date 26/01/2023
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include "pile.h"
#include "tp2_lex.h"

/** Table contenant les actions à effectuer (Acc='a' ; Deplacement='d' ; Reduction=<un numéro de règle> ; Erreur='e') */
int TableAction[26][18] =
/*{    }    [    ]    ,    :    s    n    t    f    u    #    O    M    P    A    E    V*/
{
{'d', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}, //0
{'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'e', 'e', 'e', 'e', 'e', 'e'}, //1
{'e', 'd', 'e', 'e', 'e', 'e', 'd', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}, //2
{'e', 'd', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}, //3
{'e',  3 , 'e', 'e', 'd', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}, //4
{'e',  1 , 'e',  1 ,  1 , 'e', 'e', 'e', 'e', 'e', 'e',  1 , 'e', 'e', 'e', 'e', 'e', 'e'}, //5
{'e', 'e', 'e', 'e', 'e', 'd', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}, //6
{'e',  2 , 'e',  2 ,  2 , 'e', 'e', 'e', 'e', 'e', 'e',  2 , 'e', 'e', 'e', 'e', 'e', 'e'}, //7
{'e', 'e', 'e', 'e', 'e', 'e', 'd', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}, //8
{'d', 'e', 'd', 'e', 'e', 'e', 'd', 'd', 'd', 'd', 'd', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}, //9
{'e',  4 , 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}, //10
{'e', 12 , 'e', 12 , 12 , 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}, //11
{'e', 13 , 'e', 13 , 13 , 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}, //12
{'e',  5 , 'e', 'e',  5 , 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}, //13
{'d', 'e', 'd', 'd', 'e', 'e', 'd', 'd', 'd', 'd', 'd', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}, //14
{'e', 10 , 'e', 10 , 10 , 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}, //15
{'e', 11 , 'e', 11 , 11 , 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}, //16
{'e', 14 , 'e', 14 , 14 , 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}, //17
{'e', 15 , 'e', 15 , 15 , 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}, //18
{'e', 16 , 'e', 16 , 16 , 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}, //19
{'e', 'e', 'e', 'd', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}, //20
{'e', 'e', 'e', 8  , 'd', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}, //21
{'e',  6 , 'e', 6  ,  6 , 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}, //22
{'e',  7 , 'e', 7  ,  7 , 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}, //23
{'d', 'e', 'd', 'e', 'e', 'e', 'd', 'd', 'd', 'd', 'd', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}, //24
{'e', 'e', 'e', 9  , 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}};//25

/** Table contenant les états vers lesquels naviguer (Erreur/Pas d'état=-1) */
int TableGoto[26][18] =
/*{  }  [  ]  ,  :  s  n  t  f  u  #  O  M  P  A  E  V*/
{
{ 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 1,-1,-1,-1,-1,-1}, //0
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1}, //1
{-1, 5,-1,-1,-1,-1, 6,-1,-1,-1,-1,-1,-1, 3, 4,-1,-1,-1}, //2
{-1, 7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, //3
{-1,-1,-1,-1, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, //4
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, //5
{-1,-1,-1,-1,-1, 9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, //6
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, //7
{-1,-1,-1,-1,-1,-1, 6,-1,-1,-1,-1,-1,-1,10, 4,-1,-1,-1}, //8
{ 2,-1,14,-1,-1,-1,15,16,17,18,19,-1,11,-1,-1,12,-1,13}, //9
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, //10
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, //11
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, //12
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, //13
{ 2,-1,14,22,-1,-1,15,16,17,18,19,-1,11,-1,-1,12,20,21}, //14
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, //15
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, //16
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, //17
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, //18
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, //19
{-1,-1,-1,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, //20
{-1,-1,-1,-1,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, //21
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, //22
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, //23
{ 2,-1,14,-1,-1,-1,15,16,17,18,19,-1,11,-1,-1,12,25,21}, //24
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}};//25

/** Table contenant la taille de la partie droite de chaque règle */
int taillePartieDroiteRegle[16] = {2,3,1,3,3,2,3,1,3,1,1,1,1,1,1,1};

/** Table contenant l'élément en partie gauche de chaque règle */
int elementPartieGaucheRegle[16] = {13,13,14,14,15,16,16,17,17,18,18,18,18,18,18,18};

//Prototypes des fonctions
int analyseurLR(char *_chaine);